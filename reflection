import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.Objects;
import java.util.Scanner;

public class ReflectionTest {
    public static void main(String args[]){
        String name;
        if (args.length > 0) name = args[0];
        else{
            Scanner in = new Scanner(System.in);
            System.out.println("Enter calss name(e.g.java.util.Date):");
            name = in.next();
        }

        try {
            Class cl = Class.forName(name);
            //获取父类
            Class supercl = cl.getSuperclass();
            //获取一个可以由Modifiers分析的整型数值
            String modifier = Modifier.toString(cl.getModifiers());
            //modifier --> public final
            if (modifier.length() > 0) System.out.print(modifier + " ");
            System.out.print("class" + name);
            //判断给定的类是否有继承关系
            if (supercl != null && supercl != Object.class) System.out.print(" extends"
                + supercl.getName());

            System.out.print("\n{\n");
            printConstructors(cl);
            System.out.println();
            printMethods(cl);
            System.out.println();
            printFields(cl);
            System.out.println("}");

        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        System.exit(0);
    }

    public static void printConstructors(Class cl){
        //获取类构造器
        Constructor[] constructors = cl.getDeclaredConstructors();

        for (Constructor c : constructors){
            String name = c.getName();
            System.out.print("  ");
            String modifiers = Modifier.toString(c.getModifiers());
            if (modifiers.length() > 0) System.out.print(modifiers + " ");
            System.out.print(name + "(");

            //获取参数类型
            Class[] paramTypes = c.getParameterTypes();
            for (int j = 0;j < paramTypes.length;j++){
                if (j > 0) System.out.print(",");
                System.out.print(paramTypes[j].getName());
            }
            System.out.println(");");
        }
    }

    public static void printMethods(Class cl){
        //获取类以及其父类的方法
        Method[] methods = cl.getDeclaredMethods();

        for (Method m : methods){
            Class retType = m.getReturnType();
            String name = m.getName();

            System.out.print("  ");

            //打印修饰符，返回类型和方法名
            String modifier = Modifier.toString(m.getModifiers());
            if (modifier.length() > 0)
                System.out.print(modifier + " ");
            System.out.print(retType.getName() + " " + name + "(");

            //打印参数类型
            Class[] paramTypes = m.getParameterTypes();
            for (int j = 0;j < paramTypes.length;j++){
                if (j > 0) System.out.print(paramTypes[j].getName());
            }
            System.out.println(");");
        }
    }

    public static void printFields(Class cl){
        Field[] field = cl.getDeclaredFields();

        for (Field f : field){
            Class type = f.getType();
            String name = f.getName();
            System.out.print("  ");
            String modifiers = Modifier.toString(f.getModifiers());
            if (modifiers.length() > 0)
                System.out.print(modifiers + " ");
            System.out.println(type.getName() + " " + name + ";");
        }
    }
}
